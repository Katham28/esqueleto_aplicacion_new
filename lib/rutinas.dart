// lib/rutinas.dart â€“ versiÃ³n corregida 
// Mantiene todas las rutinas y navegaciones en un Ãºnico lugar.
// AsegÃºrate de ajustar las rutas de import si cambias el nombre del paquete.

import 'package:flutter/material.dart';
import 'rutinasPage.dart';
import 'rutinasavanzadasPage.dart';
import 'inicioPage.dart';

class Rutinas {
  /// Lista visible de rutinas principales (0â€‘3)
  static const List<String> rutinasDisponibles = [
    'Rutina de Marcha',
    'Rutina de Piernas',
    'Rutina de Equilibrio',
    'RehabilitaciÃ³n Avanzada++',
  ];

  // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ NavegaciÃ³n â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

  /// Navega a la selecciÃ³n de rutinas normales.
  static void navegarConectar(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const rutinasPage()),
    );
  }

  /// Navega a la lista de rutinas avanzadas.
  static void _navegarARutinaAvanzada(BuildContext context) {
    Navigator.push(
      context,
      MaterialPageRoute(builder: (_) => const RutinasAvanzadasPage()),
    );
  }

  /// Cierra cualquier conexiÃ³n / vuelve a Inicio.

static void navegarDesconectar(BuildContext context) {
  Navigator.popUntil(context, ModalRoute.withName('/'));
  
 // Navigator.pushAndRemoveUntil(
  //  context,
  //  MaterialPageRoute(builder: (_) => const InicioPage()),
  //  (route) => false, // Elimina TODAS las rutas anteriores
  //);
}
  

  // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ EjecuciÃ³n de rutinas â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

  /// Ejecuta una rutina principal por Ã­ndice.
  static void ejecutarRutina(BuildContext context, int index) {
    if (index < 0 || index >= rutinasDisponibles.length) return;

    switch (index) {
      case 0:
        _ejecutarMarcha(context);
        break;
      case 1:
        _ejecutarPiernas(context);
        break;
      case 2:
        _ejecutarEquilibrio(context);
        break;
      case 3:
      // La 4.Âª opciÃ³n es en realidad un subâ€‘menÃº de avanzadas
        _navegarARutinaAvanzada(context);
        break;
    }
  }

  /// Ejecuta una rutina avanzada (Ã­ndices 0â€‘3 de la lista avanzada).
  static void ejecutarRutinaAvanzada(BuildContext context, int index) {
    if (index < 0 || index > 3) return;

    switch (index) {
      case 0:
        _ejecutarAvanzada1(context);
        break;
      case 1:
        _ejecutarAvanzada2(context);
        break;
      case 2:
        _ejecutarAvanzada3(context);
        break;
      case 3:
        _ejecutarAvanzada4(context);
        break;
    }
  }

  // â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Privados â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€

  static void _showSnack(BuildContext context, String text) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(content: Text(text)),
    );
  }

  // Rutinas principales
  static void _ejecutarMarcha(BuildContext context) {
    _showSnack(context, 'ðŸ¦¾ Iniciando rutina de Marcha');
    // TODO: enviar comando real por WiFi/Bluetoothâ€¦
  }

  static void _ejecutarPiernas(BuildContext context) {
    _showSnack(context, 'ðŸ¦¾ Iniciando rutina de Piernas');
  }

  static void _ejecutarEquilibrio(BuildContext context) {
    _showSnack(context, 'ðŸ¦¾ Iniciando rutina de Equilibrio');
  }

  // Rutinas avanzadas
  static void _ejecutarAvanzada1(BuildContext context) {
    _showSnack(context, 'ðŸ”¥ Avanzada 1');
  }

  static void _ejecutarAvanzada2(BuildContext context) {
    _showSnack(context, 'ðŸ”¥ Avanzada 2');
  }

  static void _ejecutarAvanzada3(BuildContext context) {
    _showSnack(context, 'ðŸ”¥ Avanzada 3');
  }

  static void _ejecutarAvanzada4(BuildContext context) {
    _showSnack(context, 'ðŸ”¥ Avanzada 4');
  }
}